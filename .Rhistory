prob1.1(100)
# Test the function
simTweedieTest(100)
# Test the function
simTweedieTest(100)
# Test the function
simTweedieTest(100)
# Test the function
simTweedieTest(100)
# Test the function
simTweedieTest(100)
# Test the function
simTweedieTest(100)
# Test the function
simTweedieTest(100)
# Test the function
simTweedieTest(100)
# Test the function
simTweedieTest(100)
#Task 1
simTweedieTest <- function(N) {
true_mu <- 10000
sample <- rtweedie(N, mu = 10000, phi = 1000, power = 1.9)
test <- t.test(sample, mu = 10000)
return (test$p.value)
}
simTweedieTest(100)
simTweedieTest(100)
simTweedieTest(100)
simTweedieTest(100)
simTweedieTest(100)
# 2. Call the simTweedieTests() function M times with a sample size of N.
# Should then return percentage of tests where the pp-value is lower than alpha
# Function to perform M t-tests
MTweedieTests <- function(M, N, alpha) {
# Replicate the simTweedieTest function M times
p_values <- replicate(M, simTweedieTest(N))
# Calculate the proportion of p-values less than alpha
proportion <- sum(p_values < alpha) / M
return(proportion)
}
# Test the function
MTweedieTests(10, 100, 0.05)
#Task 2
MTweedieTests <- function(M, N, alpha) {
teller <- 0
for(i in 1:M){
if (simTweedieTest(N) < alpha){
teller = teller + 1
}
}
return (teller/M)
}
MTweedieTests(10,1000,0.05)
# 3.
# Construct the tibble
df <- tibble(N = c(10, 100, 1000, 5000), M = 100, share_reject = NA)
df
# Fill in the share_reject column
for (i in 1:nrow(df)) {
df$share_reject[i] <- MTweedieTests(df$M[i], df$N[i], 0.05)
}
# View the tibble
df
#Task 2
MTweedieTests <- function(M, N, alpha) {
teller <- 0
for(i in 1:M){
if (simTweedieTest(N) < alpha){
teller = teller + 1
}
}
return (teller/M)
}
MTweedieTests(10,1000,0.05)
#Task 3
df2.3 <- tibble(N = c(10, 100, 1000, 5000),
M = 100, share_reject = NA)
for(i in 1:nrow(df2.3)){
N = df2.3$N[i]
M = df2.3$M[i]
df2.3$share_reject[i] = MTweedieTests(M, N, 0.05)
}
df2.3
# Create a plot
df %>%
ggplot(aes(x = N, y = share_reject)) +
geom_point() +
geom_line() +
scale_x_log10(breaks = df$N) +
labs(title = "Share of Rejections vs Sample Size",
x = "Sample Size (N)",
y = "Share of Rejections",
subtitle = "Based on Tweedie Distribution") +
theme_minimal()
# 4.
# Function to simulate data & run a t-test
simTest <- function(N, distribution = "tweedie", mu = 10000, phi = 1000, power = 1.9) {
if (distribution == "tweedie") {
sample <- rtweedie(N, mu = mu, phi = phi, power = power)
} else if (distribution == "normal") {
sample <- rnorm(N, mean = mu)
} else {
stop("Unsupported distribution type.")
}
test_result <- t.test(sample, mu = mu)
return(test_result$p.value)
}
# Function to perform multiple tests
MTests <- function(M, N, alpha = 0.05, distribution, mu = 10000, phi = 1000, power = 1.9) {
p_values <- replicate(M, simTest(N, distribution, mu, phi, power))
proportion <- sum(p_values < alpha) / M
return(proportion)
}
# Tibble construction & data fill
df <- tibble(N = c(10, 100, 1000, 5000), M = 100,
share_reject_tweedie = NA, share_reject_normal = NA)
for (i in 1:nrow(df)) {
df$share_reject_tweedie[i] <- MTests(df$M[i], df$N[i], 0.05, "tweedie")
df$share_reject_normal[i] <- MTests(df$M[i], df$N[i], 0.05, "normal")
}
# Create a combined plot
df %>%
gather('Distribution', 'Share of Rejections', share_reject_tweedie, share_reject_normal) %>%
ggplot(aes(x = N, y = `Share of Rejections`, color = Distribution)) +
geom_point() +
geom_line() +
scale_x_log10(breaks = df$N) +
labs(title = "Share of Rejections vs Sample Size",
x = "Sample Size (N)",
y = "Share of Rejections",
subtitle = "Comparison of Tweedie and Normal Distributions") +
theme_minimal()
library(tweedie)
library(tidyr)
library(ggplot2)
#
# Assignment 4
#
library(dplyr)
library(ggplot2)
prob1.1 <- function(N, mu = 0, sigma = 1) {
vector <- rnorm(N, mean = mu, sd = sigma)
m1 <- mean(vector)
return(m1)
}
###Testing function prob1.1
prob1.1(100)
###------------Problem 1.2
prob1.2 <- function(M) {
sample_means <- rep(NA, M)
for(i in 1:M) {
sample_means[i] <- prob1.1(M)
}
return (sample_means)
}
###Testing function prob1.2
prob1.2(10)
###------------ Problem 1.3
prob1.3 <- function(N) {
means = prob1.2(N)
sd = sd(means)
theor = 1/sqrt(N)
return (sd)
}
###------------ Problem 1.4
theoret1 <- function(N, sigma1) {
return (sigma1/sqrt(N))
}
sample_size = c(10,20,30,40,50,60,70,80,90,
100,110,120,130,140,150,160,170,180,190,200)
st_dev = c(NA, length(sample_size))
sigma = c(NA, length(sample_size))
theoretical = c(NA, length(sample_size))
for(i in 1:length(sample_size)){
st_dev[i]=NA
sigma[i] = 1
theoretical[i] = theoret1(sample_size[i], 1)
}
df1.4 <- tibble(N = sample_size,
st_dev = st_dev,
sigma = sigma,
theoretical = theoretical)
df1.4
###----------- Problem 1.5
for(i in 1:nrow(df1.4)){
bruk_N <- df1.4$N[i]
df1.4$st_dev[i] <- prob1.3(bruk_N)
}
###----------- Problem 1.6
ggplot(df1.4, aes(x = N, y = st_dev)) +
geom_line(aes(y = theoretical), linetype = "dashed") +
geom_line(aes(y = st_dev), linetype = "solid") +
ylim(0, 0.4)
df2.4 <- tibble(N = N2.4,
M = M2.4,
share_reject = share_reject2.4,
normal_dist = normal_2.4)
N2.4 = c(10,50,100,1000,5000)
M2.4 = c(100, 100, 100, 100, 100)
share_reject2.4 = c(NA, NA, NA, NA, NA)
normal_2.4 = c(NA, NA, NA, NA, NA)
library(tibble)
df2.4 <- tibble(N = N2.4,
M = M2.4,
share_reject = share_reject2.4,
normal_dist = normal_2.4)
for(i in 1:nrow(df2.4)){
N = df2.4$N[i]
M = df2.4$M[i]
df2.4$share_reject[i] = MTweedieTests(M, N, 0.05)
df2.4$normal_dist[i] = prob1.1(N, 10000)
}
df2.4
for(i in 1:nrow(df2.4)){
N = df2.4$N[i]
M = df2.4$M[i]
df2.4$share_reject[i] = MTweedieTests(M, N, 0.05)
df2.4$normal_dist[i] = prob1.1(N)
}
df2.4
N2.4 = c(10,50,100,1000,5000)
M2.4 = c(100, 100, 100, 100, 100)
share_reject2.4 = c(NA, NA, NA, NA, NA)
normal_2.4 = c(NA, NA, NA, NA, NA)
library(tibble)
df2.4 <- tibble(N = N2.4,
M = M2.4,
share_reject = share_reject2.4,
normal_reject = normal_2.4)
normal_sample_rejects <- function(N, mean) {
sample <- rnorm(N, mean)
test_result <- t.test(sample, mu)
return(test_result$p.value)
}
for(i in 1:nrow(df2.4)){
N = df2.4$N[i]
M = df2.4$M[i]
df2.4$share_reject[i] = MTweedieTests(M, N, 0.05)
df2.4$normal_reject[i] = normal_sample_rejects(N, 10000)
}
normal_sample_rejects <- function(N, mu) {
sample <- rnorm(N, mu)
test_result <- t.test(sample, mu)
return(test_result$p.value)
}
for(i in 1:nrow(df2.4)){
N = df2.4$N[i]
M = df2.4$M[i]
df2.4$share_reject[i] = MTweedieTests(M, N, 0.05)
df2.4$normal_reject[i] = normal_sample_rejects(N, 10000)
}
df2.4
?rnorm
normal_sample_rejects(10,10)
normal_sample_rejects(1000,10000)
normal_sample_rejects(10,10)
N2.4 = c(10,50,100,1000,5000)
M2.4 = c(100, 100, 100, 100, 100)
share_reject2.4 = c(NA, NA, NA, NA, NA)
normal_2.4 = c(NA, NA, NA, NA, NA)
library(tibble)
df2.4 <- tibble(N = N2.4,
M = M2.4,
share_reject = share_reject2.4,
normal_reject = normal_2.4)
# Function to simulate data & run a t-test
simTest <- function(N, distribution = "tweedie", mu = 10000, phi = 1000, power = 1.9) {
if (distribution == "tweedie") {
sample <- rtweedie(N, mu = mu, phi = phi, power = power)
} else if (distribution == "normal") {
sample <- rnorm(N, mean = mu)
} else {
stop("Unsupported distribution type.")
}
test_result <- t.test(sample, mu = mu)
return(test_result$p.value)
}
# Function to perform multiple tests
MTests <- function(M, N, alpha = 0.05, distribution, mu = 10000, phi = 1000, power = 1.9) {
p_values <- replicate(M, simTest(N, distribution, mu, phi, power))
proportion <- sum(p_values < alpha) / M
return(proportion)
}
N2.4 = c(10,50,100,1000,5000)
M2.4 = c(100, 100, 100, 100, 100)
share_reject2.4 = c(NA, NA, NA, NA, NA)
normal_2.4 = c(NA, NA, NA, NA, NA)
library(tibble)
df2.4 <- tibble(N = N2.4,
M = M2.4,
share_reject = share_reject2.4,
normal_reject = normal_2.4)
# Function to simulate data & run a t-test
simTest <- function(N, distribution = "tweedie", mu = 10000, phi = 1000, power = 1.9) {
if (distribution == "tweedie") {
sample <- rtweedie(N, mu = mu, phi = phi, power = power)
} else if (distribution == "normal") {
sample <- rnorm(N, mean = mu)
} else {
stop("Unsupported distribution type.")
}
test_result <- t.test(sample, mu = mu)
return(test_result$p.value)
}
# Function to perform multiple tests
MTests <- function(M, N, alpha = 0.05, distribution, mu = 10000, phi = 1000, power = 1.9) {
p_values <- replicate(M, simTest(N, distribution, mu, phi, power))
proportion <- sum(p_values < alpha) / M
return(proportion)
}
for(i in 1:nrow(df2.4)){
N = df2.4$N[i]
M = df2.4$M[i]
df2.4$share_reject[i] = MTests(df2.4$M[i], df$N[i], 0.05, "tweedie")
df2.4$normal_reject[i] = MTests(df2.4$M[i], df$N[i], 0.05, "normal")
}
for(i in 1:nrow(df2.4)){
N = df2.4$N[i]
M = df2.4$M[i]
df2.4$share_reject[i] = MTests(M, N, 0.05, "tweedie")
df2.4$normal_reject[i] = MTests(M, N, 0.05, "normal")
}
df2.4
N2.4 = c(10,50,100,1000,5000, 10000)
M2.4 = c(100, 100, 100, 100, 100, 100)
share_reject2.4 = c(NA, NA, NA, NA, NA, NA)
normal_2.4 = c(NA, NA, NA, NA, NA, NA)
library(tibble)
df2.4 <- tibble(N = N2.4,
M = M2.4,
share_reject = share_reject2.4,
normal_reject = normal_2.4)
# Function to simulate data & run a t-test
simTest <- function(N, distribution = "tweedie", mu = 10000, phi = 1000, power = 1.9) {
if (distribution == "tweedie") {
sample <- rtweedie(N, mu = mu, phi = phi, power = power)
} else if (distribution == "normal") {
sample <- rnorm(N, mean = mu)
} else {
stop("Unsupported distribution type.")
}
test_result <- t.test(sample, mu = mu)
return(test_result$p.value)
}
# Function to perform multiple tests
MTests <- function(M, N, alpha = 0.05, distribution, mu = 10000, phi = 1000, power = 1.9) {
p_values <- replicate(M, simTest(N, distribution, mu, phi, power))
proportion <- sum(p_values < alpha) / M
return(proportion)
}
for(i in 1:nrow(df2.4)){
N = df2.4$N[i]
M = df2.4$M[i]
df2.4$share_reject[i] = MTests(M, N, 0.05, "tweedie")
df2.4$normal_reject[i] = MTests(M, N, 0.05, "normal")
}
df2.4
df2.3 %>%
ggplot(aes(x = N, y = share_reject)) +
geom_point() +
geom_line() +
scale_x_log10(breaks = df$N) +
labs(title = "Share of Rejections vs Sample Size") +
theme_minimal()
df2.4 %>%
ggplot(aes(x = N, y = share_reject, y = normal_reject)) +
geom_point() +
geom_line() +
scale_x_log10(breaks = df$N) +
labs(title = "Share of Rejections vs N") +
theme_minimal()
df2.4 %>%
ggplot(aes(x = N, y = share_reject, normal_reject)) +
geom_point() +
geom_line() +
scale_x_log10(breaks = df$N) +
labs(title = "Share of Rejections vs N") +
theme_minimal()
df2.4 %>%
ggplot(aes(x = N)) +
geom_point() +
geom_line(aes(y = share_reject), linetype = "dashed") +
geom_line(aes(y = normal_reject), linetype = "solid") +
scale_x_log10(breaks = df$N) +
labs(title = "Share of Rejections vs N") +
theme_minimal()
df2.4 %>%
ggplot(aes(x = N, y = normal_reject)) +
geom_point() +
geom_line(aes(y = share_reject), linetype = "dashed") +
geom_line(aes(y = normal_reject), linetype = "solid") +
scale_x_log10(breaks = df$N) +
labs(title = "Share of Rejections vs N") +
theme_minimal()
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
lines <- readLines("suites_dw_Table1.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
find_separator_line <- function(lines) {
for(i in seq_along(lines)) {
line <- lines[i]
# Check if the line contains only non-alphanumeric characters
# This will identify lines with characters like -, =, +, etc.
if(!grepl("^\\s*$", line) && grepl("^[^a-zA-Z0-9]+$", line)) {
return(i+1)
}
}
return(NULL)
}
L <- find_separator_line(lines)
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
file_name <- "variable_descriptions.txt"
descriptions <- lines[1:(L - 3)]
cat(descriptions, file = file_name, sep = "\n")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names_vector <- sapply(lines[1:(L - 3)], function(lines) {
words <- unlist(strsplit(lines, "\\s+"))
return(words[1])
})
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
# Collapse the variable names into a single comma-separated string
header_string <- paste(variable_names_vector, collapse = ",")
setwd("C:/H23/RTDS/GitOWB/git-OveBugten")
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
lines <- readLines("suites_dw_Table1.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
find_separator_line <- function(lines) {
for(i in seq_along(lines)) {
line <- lines[i]
# Check if the line contains only non-alphanumeric characters
# This will identify lines with characters like -, =, +, etc.
if(!grepl("^\\s*$", line) && grepl("^[^a-zA-Z0-9]+$", line)) {
return(i+1)
}
}
return(NULL)
}
L <- find_separator_line(lines)
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
file_name <- "variable_descriptions.txt"
descriptions <- lines[1:(L - 3)]
cat(descriptions, file = file_name, sep = "\n")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names_vector <- sapply(lines[1:(L - 3)], function(lines) {
words <- unlist(strsplit(lines, "\\s+"))
return(words[1])
})
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
# Collapse the variable names into a single comma-separated string
header_string <- paste(variable_names_vector, collapse = ",")
csv_file_name <- "rewritten_data.csv"
cat(header_string, file = csv_file_name, sep = "\n")
shortened_lines <- lapply(lines[(L+1):length(lines)], function(line) {
line <- gsub("\\|", "", line)
words_or_numbers <- unlist(strsplit(line, "\\s+"))
result_line <- paste(words_or_numbers, collapse = ",")
sub("^,", "", result_line)
})
# Convert the list back to a character vector
shortened_lines_vector <- unlist(shortened_lines)
# Append to the .csv file without overwriting existing content
cat(shortened_lines_vector, file = "rewritten_data.csv", append = TRUE, sep = "\n")
# Read the finished .csv back into R in the normal way.
reread_df <- read.csv("rewritten_data.csv")
library(ggplot2)
# Create a histogram of galaxy sizes
ggplot(reread_df, aes(x=size)) +
geom_histogram(fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Galaxy Sizes",
x = "Size of Galaxies",
y = "Number of Galaxies") +
theme_minimal()
library(ggplot2)
# Histogram for linear diameter (a_26)
ggplot(reread_df, aes(x=a_26)) +
geom_histogram(fill = "blue", alpha = 0.7, bins = 30) +
labs(title = "Distribution of Galaxy Linear Diameter (a_26)",
x = "Linear Diameter (kpc)",
y = "Number of Galaxies") +
theme_minimal()
reread_df$a_26 <- as.numeric(as.character(reread_df$a_26))
# Histogram for linear diameter (a_26)
ggplot(reread_df, aes(x=a_26)) +
geom_histogram(fill = "blue", alpha = 0.7, bins = 30) +
labs(title = "Distribution of Galaxy Linear Diameter (a_26)",
x = "Linear Diameter (kpc)",
y = "Number of Galaxies") +
theme_minimal()
non_numeric_rows <- reread_df[!grepl("^\\d*\\.?\\d+$", reread_df$a_26), ]
print(non_numeric_rows)
library(ggplot2)
reread_df$a_26 <- as.numeric(as.character(reread_df$a_26))
# Histogram for linear diameter (a_26)
ggplot(reread_df, aes(x=a_26)) +
geom_histogram(fill = "blue", alpha = 0.7, bins = 30) +
labs(title = "Distribution of Galaxy Linear Diameter (a_26)",
x = "Linear Diameter (kpc)",
y = "Number of Galaxies") +
theme_minimal()
summary(reread_df$a_26)
